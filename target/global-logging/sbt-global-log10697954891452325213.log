[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\scott\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\scott\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 11.0.14)
[debug]       Load.loadUnit: plugins took 49.196336ms
[debug]       Load.loadUnit: defsScala took 0.239207ms
[debug] [Loading] Scanning directory C:\Users\scott\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\scott\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 8.905601 ms
[debug]           Load.resolveProject(global-plugins) took 28.116981ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\scott\.sbt\1.0\plugins, plugins: List(<none>))) took 52.135956ms
[debug] [Loading] Done in C:\Users\scott\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 65.033615ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.142546ms
[debug]     Load.loadUnit(file:/C:/Users/scott/.sbt/1.0/plugins/, ...) took 120.640193ms
[debug]   Load.apply: load took 214.774643ms
[debug]   Load.apply: resolveProjects took 3.670159ms
[debug]   Load.apply: finalTransforms took 33.429458ms
[debug]   Load.apply: config.delegates took 4.58075ms
[debug]   Load.apply: Def.make(settings)... took 215.960129ms
[debug]   Load.apply: structureIndex took 60.9699ms
[debug]   Load.apply: mkStreams took 1.581765ms
[info] loading global plugins from C:\Users\scott\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 1414.35783ms
[debug]           Load.loadUnit: plugins took 14.7539ms
[debug]           Load.loadUnit: defsScala took 0.003841ms
[debug] [Loading] Scanning directory C:\Users\scott\Documents\functional-actors\project
[debug]             Load.loadUnit: mkEval took 5.363531ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\scott\Documents\functional-actors\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.138064 ms
[info] loading settings for project functional-actors-build from idea.sbt ...
[debug]               Load.resolveProject(functional-actors-build) took 1.814686ms
[debug]             Load.loadTransitive: finalizeProject(Project(id functional-actors-build, base: C:\Users\scott\Documents\functional-actors\project, plugins: List(<none>))) took 3.285404ms
[debug] [Loading] Done in C:\Users\scott\Documents\functional-actors\project, returning: (functional-actors-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1224.193996ms
[debug]           Load.loadUnit: cleanEvalClasses took 2.697969ms
[debug]         Load.loadUnit(file:/C:/Users/scott/Documents/functional-actors/project/, ...) took 1242.268012ms
[debug]       Load.apply: load took 1243.125383ms
[debug]       Load.apply: resolveProjects took 0.080946ms
[debug]       Load.apply: finalTransforms took 4.549531ms
[debug]       Load.apply: config.delegates took 0.196604ms
[debug]       Load.apply: Def.make(settings)... took 39.259459ms
[debug]       Load.apply: structureIndex took 15.517614ms
[debug]       Load.apply: mkStreams took 0.00433ms
[info] loading project definition from C:\Users\scott\Documents\functional-actors\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 2063.190084ms
[debug]     Load.loadUnit: defsScala took 0.003282ms
[debug] [Loading] Scanning directory C:\Users\scott\Documents\functional-actors
[debug]       Load.loadUnit: mkEval took 0.130464ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\scott\Documents\functional-actors, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 0.939155 ms
[info] loading settings for project functional-actors from build.sbt ...
[debug]         Load.resolveProject(functional-actors) took 17.667678ms
[debug]       Load.loadTransitive: finalizeProject(Project(id functional-actors, base: C:\Users\scott\Documents\functional-actors, plugins: List(<none>))) took 19.295678ms
[debug] [Loading] Done in C:\Users\scott\Documents\functional-actors, returning: (functional-actors)
[debug]     Load.loadUnit: loadedProjectsRaw took 20.647596ms
[debug]     Load.loadUnit: cleanEvalClasses took 0.006774ms
[debug]   Load.loadUnit(file:/C:/Users/scott/Documents/functional-actors/, ...) took 2084.173338ms
[debug] Load.apply: load took 2085.248684ms
[debug] Load.apply: resolveProjects took 0.072496ms
[debug] Load.apply: finalTransforms took 13.698389ms
[debug] Load.apply: config.delegates took 0.199257ms
[debug] Load.apply: Def.make(settings)... took 27.231254ms
[debug] Load.apply: structureIndex took 11.254503ms
[debug] Load.apply: mkStreams took 0.003842ms
[info] set current project to functional-actors (in build file:/C:/Users/scott/Documents/functional-actors/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62126 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62126, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to functional-actors (in build file:/C:/Users/scott/Documents/functional-actors/)
[debug] > Exec(idea-shell, None, None)
